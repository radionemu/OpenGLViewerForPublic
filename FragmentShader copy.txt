#version 400 core

out vec3 color;
in vec3 FgColorF;


//Phong Shading
uniform vec3 light_pos;
uniform vec3 diffuse_albedo;
uniform vec3 specular_albedo;
uniform float specular_power;
uniform vec3 ambient;

in mat4 M;
in mat4 V;
in mat4 P;

//Phong from Vertex
uniform int isPhong;
in vec3 vtxPositionF;
in vec3 vtxNormalF;


void main()
{
    if(isPhong == 1){
        vec4 ViewPos = V * M * vec4(vtxPositionF,1);
        vec3 ViewNorm = vec3(V * M * vec4((vtxNormalF),0));
        vec3 ViewLight = vec3(V * vec4(light_pos,1)) - vec3(ViewPos);
        float ViewLightDistance = length(ViewLight);
        vec3 ViewVector = -vec3(ViewPos);

        ViewNorm = normalize(ViewNorm);
        ViewLight = normalize(ViewLight);
        ViewVector = normalize(ViewVector);

        vec3 Reflec = reflect(-ViewLight, ViewNorm);

        vec3 Diffuse = max(dot(ViewLight, ViewNorm),0) * diffuse_albedo;
        vec3 Specular = pow(max(dot(Reflec,ViewVector),0), specular_power) * specular_albedo;

        color = (ambient + Diffuse + Specular) * FgColorF;
    }
    else{
    	color = FgColorF;
    }
}