#version 400 core

uniform vec3 locPosition;
uniform vec3 rotationL;
uniform vec3 rotationW;
uniform vec3 rotationV;
uniform vec3 scale;
uniform int PrjMode;
uniform vec3 Camx;
uniform vec3 Camy;
uniform vec3 Camz;
uniform vec3 CamPos;
uniform vec2 YP;

uniform int Vmode;

in vec3 vtxPosition;
in vec2 vtxUV;
in vec3 vtxNormal;

in vec3 FgColor;


out vec3 FgColorF;
out vec2 UV;

//cameraTransform 23/09/04
int mat4 camTransform;

//light attributes
uniform vec3 light_pos;
uniform vec3 light_dir;
uniform vec3 diffuse_albedo = vec3(1);
uniform vec3 specular_albedo = vec3(1);
uniform float specular_power = 50.0;
uniform vec3 ambient = vec3(0.3,0.3,0.3);

uniform int isPhong;

out mat4 M;
out mat4 V;
out mat4 P;
out vec3 vtxPositionF;
out vec3 vtxNormalF;

void main()
{

	mat4 scale = mat4(scale.x, 0, 0, 0,
	                  0, scale.y, 0, 0,
	                  0, 0, scale.z, 0,
	                  0, 0, 0,       1);

    mat4 rotxL = mat4(1, 0, 0, 0,
                     0, cos(rotationL.x), -sin(rotationL.x), 0,
                     0, sin(rotationL.x), cos(rotationL.x), 0,
                     0,0,0,1);
    mat4 rotyL = mat4(cos(rotationL.y),0,sin(rotationL.y),0,
                     0, 1, 0, 0,
                     -sin(rotationL.y), 0, cos(rotationL.y),0,
                     0,0,0,1);
    mat4 rotzL = mat4(cos(rotationL.z), sin(rotationL.z),0,0,
                     -sin(rotationL.z),cos(rotationL.z),0,0,
                     0,0,1,0,
                     0,0,0,1);
    mat4 ROTL = rotzL*rotyL*rotxL;

    mat4 rotxW = mat4(1, 0, 0, 0,
             0, cos(rotationW.x), -sin(rotationW.x), 0,
             0, sin(rotationW.x), cos(rotationW.x), 0,
             0,0,0,1);
    mat4 rotyW = mat4(cos(rotationW.y),0,sin(rotationW.y),0,
                     0, 1, 0, 0,
                     -sin(rotationW.y), 0, cos(rotationW.y),0,
                     0,0,0,1);
    mat4 rotzW = mat4(cos(rotationW.z), sin(rotationW.z),0,0,
                     -sin(rotationW.z),cos(rotationW.z),0,0,
                     0,0,1,0,
                     0,0,0,1);
    mat4 ROTW = rotzW*rotyW*rotxW;

    mat4 rotxV = mat4(1, 0, 0, 0,
             0, cos(rotationV.x), -sin(rotationV.x), 0,
             0, sin(rotationV.x), cos(rotationV.x), 0,
             0,0,0,1);
    mat4 rotyV = mat4(cos(rotationV.y),0,sin(rotationV.y),0,
                     0, 1, 0, 0,
                     -sin(rotationV.y), 0, cos(rotationV.y),0,
                     0,0,0,1);
    mat4 rotzV = mat4(cos(rotationV.z), sin(rotationV.z),0,0,
                     -sin(rotationV.z),cos(rotationV.z),0,0,
                     0,0,1,0,
                     0,0,0,1);
    mat4 ROTV = rotzV*rotyV*rotxV;

    mat4 pos = mat4(1,0,0,0,
                    0,1,0,0,
                    0,0,1,0,
                    locPosition.x,locPosition.y,locPosition.z,1);

    mat4 proj = mat4(1,0,0,0,
                     0,1,0,0,
                     0,0,1,1,
                     0,0,-1,0);
    if(PrjMode == 0){
        proj = mat4(1,0,0,0,
                    0,1,0,0,
                    0,0,1,0,
                    0,0,0,1);
    }else{
        proj = mat4(1,0,0,0,
                    0,1,0,0,
                    0,0,1,1,
                    0,0,-1,0);
    }

    mat4 camP = mat4(1,0,0,0,
                     0,1,0,0,
                     0,0,1,0,
                     CamPos.x,CamPos.y,CamPos.z,1);

    mat4 camR = mat4(Camx.x,Camy.x,-Camz.x,0,
                     Camx.y,Camy.y,-Camz.y,0,
                     Camx.z,Camy.z,-Camz.z,0,
                     0,0,0,1);

    M = pos * ROTL * scale;
    V = camP * ROTW;
    P = proj * ROTV ;


	gl_PointSize = 5.0f;

	//diffuse & specular
    if(isPhong == 0){
        	vec4 ViewPos = V * M * vec4(vtxPosition,1);
        	vec3 ViewNorm = vec3(V * M * vec4((vtxNormal),0));
        	vec3 ViewLight = vec3(V * vec4(light_pos,1)) - vec3(ViewPos);
        	float ViewLightDistance = length(ViewLight);
        	vec3 ViewVector = -vec3(ViewPos);

        	ViewNorm = normalize(ViewNorm);
        	ViewLight = normalize(ViewLight);
        	ViewVector = normalize(ViewVector);

            vec3 Reflec = reflect(-ViewLight, ViewNorm);

            vec3 Diffuse = max(dot(ViewLight, ViewNorm),0) * diffuse_albedo;
            vec3 Specular = pow(max(dot(Reflec,ViewVector),0), specular_power) * specular_albedo;

        	FgColorF = (ambient + Diffuse + Specular) * FgColor;
    }else{
        FgColorF = FgColor;
    }
    vtxPositionF = vtxPosition;
    vtxNormalF = vtxNormal;

    gl_Position = P * cam * V * M * vec4(vtxPosition,1);
    UV = vtxUV;
}